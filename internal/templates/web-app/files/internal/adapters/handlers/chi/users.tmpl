package chi

import (
	"fmt"
	"html/template"
	"net/http"
	"path/filepath"
	"strings"

	"github.com/go-chi/chi/v5"
)

func (router router) registerUserRoutes() {
	router.engine.Route(fmt.Sprintf("%v", router.globalPrefix), func(r chi.Router) {
		r.Get("/", router.IndexHandler)
		r.Get("/{id}", router.ShowUserHandler)
		r.Post("/", router.CreateUserHandler)
		r.Put("/{id}", router.UpdateUserHandler)
		r.Delete("/{id}", router.DeleteUserHandler)
	})

	router.serveStaticFiles()
}

func (router router) serveStaticFiles() {
	assetsDir := filepath.Join(router.rootDir, "assets")
	path := "/assets"
	if path != "/" && path[len(path)-1] != '/' {
		router.engine.Get(path, http.RedirectHandler(path+"/", http.StatusMovedPermanently).ServeHTTP)
		path += "/"
	}
	path += "*"

	router.engine.Get(path, func(w http.ResponseWriter, r *http.Request) {
		rctx := chi.RouteContext(r.Context())
		pathPrefix := strings.TrimSuffix(rctx.RoutePattern(), "/*")
		fs := http.StripPrefix(pathPrefix, http.FileServer(http.Dir(assetsDir)))
		fs.ServeHTTP(w, r)
	})
}

func (router router) CreateUserHandler(w http.ResponseWriter, r *http.Request) {
	err := r.ParseForm()
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	name := r.Form.Get("name")

	_, err = router.service.Create(name)
	if err != nil {
		http.Error(w, err.Error(), http.StatusUnprocessableEntity)
		return
	}
	w.WriteHeader(http.StatusCreated)
}

func (router router) DeleteUserHandler(w http.ResponseWriter, r *http.Request) {
	_, err := router.service.Delete(chi.URLParam(r, "id"))
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	w.WriteHeader(http.StatusOK)
}

func (router router) IndexHandler(w http.ResponseWriter, r *http.Request) {
	result, err := router.service.Index()
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	usersHtmlFile := filepath.Join(router.rootDir, "assets/users.html")
	tmpl, err := template.ParseFiles(usersHtmlFile)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	err = tmpl.Execute(w, result)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
}

func (router router) ShowUserHandler(w http.ResponseWriter, r *http.Request) {
	result, err := router.service.Show(chi.URLParam(r, "id"))
	if err != nil {
		http.Error(w, err.Error(), http.StatusNotFound)
	}

	userHtmlFile := filepath.Join(router.rootDir, "assets/user.html")

	tmpl, err := template.ParseFiles(userHtmlFile)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	err = tmpl.Execute(w, result)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
}

func (router router) UpdateUserHandler(w http.ResponseWriter, r *http.Request) {
	err := r.ParseForm()
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	name := r.Form.Get("name")

	_, err = router.service.Update(chi.URLParam(r, "id"), name)
	if err != nil {
		http.Error(w, err.Error(), http.StatusNotFound)
		return
	}
	w.WriteHeader(http.StatusOK)
}
