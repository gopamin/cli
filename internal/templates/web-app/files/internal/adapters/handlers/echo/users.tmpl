package echo

import (
	"html/template"
	"net/http"
	"path/filepath"

	"github.com/labstack/echo/v4"
)

func (router router) registerUserRoutes() {
	group := router.engine.Group(router.globalPrefix)

	group.GET("", router.IndexHandler)
	group.GET("/:id", router.ShowUserHandler)
	group.POST("", router.CreateUserHandler)
	group.PUT("/:id", router.UpdateUserHandler)
	group.DELETE("/:id", router.DeleteUserHandler)

	router.engine.GET("/assets/*", router.serveStaticFilesHandler)

}

func (router router) serveStaticFilesHandler(c echo.Context) error {
	assetsDir := filepath.Join(router.rootDir, "assets")
	return c.File(filepath.Join(assetsDir, c.Param("*")))
}

func (router router) CreateUserHandler(c echo.Context) error {
	name := c.FormValue("name")
	_, err := router.service.Create(name)
	if err != nil {
		return c.String(http.StatusUnprocessableEntity, err.Error())
	}
	return c.NoContent(http.StatusCreated)
}

func (router *router) DeleteUserHandler(c echo.Context) error {
	_, err := router.service.Delete(c.Param("id"))
	if err != nil {
		return c.String(http.StatusNotFound, err.Error())
	}
	return c.NoContent(http.StatusOK)
}

func (router *router) IndexHandler(c echo.Context) error {
	result, err := router.service.Index()
	if err != nil {
		return c.String(http.StatusInternalServerError, err.Error())
	}

	usersHtmlFile := filepath.Join(router.rootDir, "assets/users.html")
	tmpl, err := template.ParseFiles(usersHtmlFile)
	if err != nil {
		return c.String(http.StatusInternalServerError, err.Error())
	}

	return tmpl.Execute(c.Response(), result)
}

func (router *router) ShowUserHandler(c echo.Context) error {
	result, err := router.service.Show(c.Param("id"))
	if err != nil {
		return c.String(http.StatusNotFound, err.Error())
	}

	userHtmlFile := filepath.Join(router.rootDir, "assets/user.html")
	tmpl, err := template.ParseFiles(userHtmlFile)
	if err != nil {
		return c.String(http.StatusInternalServerError, err.Error())
	}

	return tmpl.Execute(c.Response(), result)
}

func (router *router) UpdateUserHandler(c echo.Context) error {
	name := c.FormValue("name")
	_, err := router.service.Update(c.Param("id"), name)
	if err != nil {
		return c.String(http.StatusNotFound, err.Error())
	}
	return c.NoContent(http.StatusOK)
}
