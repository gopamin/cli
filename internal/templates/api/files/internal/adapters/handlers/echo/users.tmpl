package echo

import (
	"{{.Name}}/internal/core/api"
	"encoding/json"
	"fmt"
	"io"
	"net/http"

	"github.com/labstack/echo/v4"
)

func (router router) registerUserRoutes() {
	group := router.engine.Group(router.globalPrefix + "/users")

	group.GET("", router.IndexHandler)
	group.GET("/:id", router.ShowUserHandler)
	group.POST("", router.CreateUserHandler)
	group.PUT("/:id", router.UpdateUserHandler)
	group.DELETE("/:id", router.DeleteUserHandler)
}

func (router router) CreateUserHandler(c echo.Context) error {
	var response api.Response

	body, err := io.ReadAll(c.Request().Body)
	if err != nil {
		response := api.Response{Error: api.FailedToReadRequestBody}
		return c.JSON(http.StatusInternalServerError, response)
	}

	var requestBody map[string]interface{}
	if err := json.Unmarshal(body, &requestBody); err != nil {
		response := api.Response{Error: api.FailedToEncodeBodyPayload}
		return c.JSON(http.StatusInternalServerError, response)
	}

	name, _ := requestBody["name"].(string)
	result, err := router.service.Create(name)
	if err != nil {
		response := api.Response{Message: err.Error(), Error: api.RequiredField}
		return c.JSON(http.StatusUnprocessableEntity, response)
	}

	response = api.Response{Message: "Created user successfully", Data: result}
	return c.JSON(http.StatusOK, response)
}

func (router *router) DeleteUserHandler(c echo.Context) error {
	var response api.Response

	rowsEffected, err := router.service.Delete(c.Param("id"))
	if err != nil {
		response = api.Response{Message: err.Error(), Error: api.DatabaseOperationFailure}
		return c.JSON(http.StatusInternalServerError, response)
	}

	if rowsEffected > "0" {
		response = api.Response{
			Message: fmt.Sprintf("deleted user with ID of %v successfully", c.Param("id")),
		}
	} else {
		response = api.Response{
			Message: fmt.Sprintf("no user found with ID of %v", c.Param("id")),
		}
	}

	return c.JSON(http.StatusOK, response)
}

func (router *router) IndexHandler(c echo.Context) error {
	var response api.Response

	result, err := router.service.Index()
	if err != nil {
		response = api.Response{Message: err.Error(), Error: api.DatabaseOperationFailure}
		return c.JSON(http.StatusInternalServerError, response)
	}

	response = api.Response{
		Message: "Fetched users successfully",
		Data:    result,
	}

	return c.JSON(http.StatusOK, response)
}

func (router *router) ShowUserHandler(c echo.Context) error {
	var response api.Response

	result, err := router.service.Show(c.Param("id"))
	if err != nil {
		response = api.Response{Message: err.Error(), Error: api.NotFoundError}
	} else {
		response = api.Response{Message: "Fetched user successfully", Data: result}
	}

	return c.JSON(http.StatusOK, response)
}

func (router *router) UpdateUserHandler(c echo.Context) error {
	var response api.Response

	body, err := io.ReadAll(c.Request().Body)
	if err != nil {
		response := api.Response{Error: api.FailedToReadRequestBody}
		return c.JSON(http.StatusInternalServerError, response)
	}

	var requestBody map[string]interface{}
	err = json.Unmarshal(body, &requestBody)
	if err != nil {
		response := api.Response{Error: api.FailedToEncodeBodyPayload}
		return c.JSON(http.StatusInternalServerError, response)
	}

	name, _ := requestBody["name"].(string)
	result, err := router.service.Update(c.Param("id"), name)
	if err != nil {
		response := api.Response{Message: err.Error(), Error: api.RequiredField}
		return c.JSON(http.StatusUnprocessableEntity, response)
	}

	response = api.Response{Message: "User updated successfully", Data: result}
	return c.JSON(http.StatusOK, response)
}
