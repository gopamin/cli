## Kafka Guide

Since this project incorporates Kafka as a Pub/Sub service, you must adhere to the following instructions before running the app.  
A `docker-compose.yml` file is included in this project which will be used for creating a Kafka container. Some commands are also added to the `Makefile` file for running a container (The following guide is applicable if GNU/Make tool is installed on your machine).

### Run A Kafka Container

First, make sure Docker is up and running on your machine. Then in the root path of the project run the following command:

```text
$ make kafka-up
```

In order to stop the container, you can run the following command:

```text
$ make kafka-down
```

## Produce A New Message

By running the following command in the terminal, open the Kafka CLI:

```text
$ docker exec -it kafka sh
```

In the Kafka CLI, consume message from a topic using the following command. For example, if you want to consume data coming from a topic named `testing`, you need to run the following command:

```text
$ kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic testing
```

The `main` function is the entry point of our app:

```go
func main() {
	broker := kafka.New("testing")
	service := services.NewBrokerService(broker)
	service.Produce(domain.Message{Data: "Hello World"})

	// service.Consume()
}
```

As shown above, we have used the same name (`testing`) for our topic that we used along with the previous command in the Kafka CLI. The responsibility of the `service.Produce` is to produce a new message of type `domain.Message` to Kafka; so by running the `make run` command inside the project folder, a new message will be published to the Kafka topic as follows:

```text
{"data":"Hello World"}
```

## Consume Messages from A Topic

As shown above, the `service.Consume()` line is commented out; in order to turn our app into a consumer, we need to change the `main` function as follows:

```go
func main() {
	broker := kafka.New("testing")
	service := services.NewBrokerService(broker)
	// service.Produce(domain.Message{Data: "Hello World"})

	service.Consume()
}
```

Now we need to run the `make run` command inside the project folder; this time around the app does no exit because it needs to wait for incoming messages.  
As the next step, we need to go to the Kafka CLI and run the following command:

```text
$ kafka-console-producer.sh --bootstrap-server localhost:9092 --topic testing
```

Then we enter a message such as:

```text
>Hello World
```

By hitting enter then referring to the terminal window that the app is running in, we will see:

```text
$ make run
Hello World
```

## How to Create Producer And Consumer Apps?

As another approach, instead of using the Kafka CLI in order to consume a topic or produce messages in a topic, we can create two stand-alone apps and use them as a producer and consumer respectively. To start, let's create a Kafka microservice called `proeducer` using the following command:

```text
$ gopamin new -n producer -t microservice -p kafka
```

Then create the second one named `consumer` as follows:

```text
$ gopamin new -n consumer -t microservice -p kafka
```

We do not need to change the `producer` app at all; the `consumer` though needs to get modified as follows:

```go
func main() {
	broker := kafka.New("testing")
	service := services.NewBrokerService(broker)
	service.Consume()
}
```

As the final step, we need to open up two different terminal windows and cd into those projects then run the `make run` command for the `consumer` and `producer` respectively; inside the terminal window having to do with the `consumer` app you will see:

```text
$ make run
{"data":"Hello World"}
```
