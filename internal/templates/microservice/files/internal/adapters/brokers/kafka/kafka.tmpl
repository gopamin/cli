package kafka

import (
	"context"
	"{{.Name}}/internal/core/ports"
	"os"

	"github.com/segmentio/kafka-go"
)

type kafkaBroker struct {
	writer *kafka.Writer
	reader *kafka.Reader
}

func New(topic string, logger ports.Logger) ports.MessageBrokerInterface {
	broker := os.Getenv("KAFKA_BROKER")

	writer := kafka.NewWriter(kafka.WriterConfig{
		Brokers:  []string{broker},
		Topic:    topic,
		Balancer: &kafka.Hash{},
	})

	reader := kafka.NewReader(kafka.ReaderConfig{
		Brokers:   []string{broker},
		Topic:     topic,
		Partition: 0,
		MinBytes:  10e3,
		MaxBytes:  10e6,
	})

	logger.Info("Successfully connected to Kafka")

	return &kafkaBroker{
		writer: writer,
		reader: reader,
	}
}

func (k *kafkaBroker) Produce(ctx context.Context, value []byte) error {
	defer k.writer.Close()

	return k.writer.WriteMessages(ctx, kafka.Message{
		Value: value,
	})
}

func (k *kafkaBroker) Consume(ctx context.Context, handler func(value []byte)) error {
	defer k.reader.Close()

	for {
		m, err := k.reader.ReadMessage(ctx)
		if err != nil {
			return err
		}
		handler(m.Value)
	}
}
