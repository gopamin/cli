## API Guide

This project is created without any database integration. The `NewUserService` though needs an input param of type `ports.UserRepositoryInterface`; so a `MockRepository` is added to the project to satisfy the `NewUserService` requirements as you can see in the `main` function below:

```go
// cmd/main.go
func main() {
	db := &mock.MockRepository{}
	service := services.NewUserService(db)
	handlers := http.NewRouter(service)
	server.Serve(handlers)
}
```

In this case, by sending an HTTP GET request to the `http://localhost:8080/api/v1/users` endpoint, you'll get a successful response.

### Add A New User

In order to add a new user, run the following curl command in the terminal:

```text
curl --location 'http://localhost:8080/api/v1/users' \
--header 'Content-Type: application/json' \
--data '{
    "name": "John Doe"
}'
```

Now by sending an HTTP GET request to the `http://localhost:8080/api/v1/users`, you'll see a user named John Doe in the response.

### Fetch An Existing User 
In order to fetch an existing user by ID, run the following curl command in the terminal (Replace the `<USER_ID>` with an actual ID):

```text
curl --location 'http://localhost:8080/api/v1/users/<USER_ID>'
```

### Update An Existing User

In order to update an existing user, run the following curl command in the terminal (Replace the `<USER_ID>` with an actual ID):

```text
curl --location --request PUT 'http://localhost:8080/api/v1/users/<USER_ID>' \
--header 'Content-Type: application/json' \
--data '{
    "name": "Jane Doe"
}'
```

### Delete An Existing User

In order to delete an existing user, run the following curl command in the terminal (Replace the `<USER_ID>` with an actual ID):

```text
curl --location --request DELETE 'http://localhost:8080/api/v1/users/<USER_ID>'
```
