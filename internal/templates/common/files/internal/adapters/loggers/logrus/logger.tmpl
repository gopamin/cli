package logrus

import (
	"io"
	"os"
	"{{.Name}}/internal/core/ports"

	"github.com/sirupsen/logrus"
)

type logger struct {
	logger *logrus.Logger
}

func New(fileName ...string) ports.Logger {
	var out io.Writer
	if len(fileName) > 0 {
		file, err := os.OpenFile(fileName[0], os.O_CREATE|os.O_WRONLY|os.O_APPEND, 0666)
		if err != nil {
			panic(err)
		}
		out = file
	} else {
		out = os.Stdout
	}
	l := &logrus.Logger{
		Level: logrus.InfoLevel,
		Out:   out,
	}
	l.Formatter = &logrus.TextFormatter{FullTimestamp: true}
	return logger{logger: l}
}

func (l logger) Info(message string, args ...any) {
	if len(args) > 0 {
		l.logger.WithFields(prepareArgs(args...)).Info(message)
	} else {
		l.logger.Info(message)
	}
}

func (l logger) Warn(message string, args ...any) {
	if len(args) > 0 {
		l.logger.WithFields(prepareArgs(args...)).Warn(message)
	} else {
		l.logger.Warn(message)
	}
}

func (l logger) Error(message string, args ...any) {
	if len(args) > 0 {
		l.logger.WithFields(prepareArgs(args...)).Error(message)
	} else {
		l.logger.Error(message)
	}
}

func (l logger) Fatal(err error) {
	l.logger.Info(err.Error())
	os.Exit(1)
}

func (l logger) Panic(err error) {
	panic(err)
}

func prepareArgs(args ...any) logrus.Fields {
	fields := map[string]any{}
	if len(args)%2 != 0 {
		panic("args must be key-value pairs")
	}
	for i := 0; i < len(args); i += 2 {
		key := args[i]
		value := args[i+1]
		fields[key.(string)] = value
	}
	return fields
}
