package redis

import (
	"context"
	"fmt"
	"{{.Name}}/internal/core/ports"
	"os"

	"github.com/redis/go-redis/v9"
)

type redisBroker struct {
	client  *redis.Client
	channel string
}

func New(channel string) ports.MessageBrokerInterface {
	host := os.Getenv("REDIS_HOST")
	port := os.Getenv("REDIS_PORT")

	client := redis.NewClient(&redis.Options{
		Addr:     fmt.Sprintf("%v:%v", host, port),
		Password: "",
		DB:       0,
	})

	c := &redisBroker{client: client, channel: channel}

	return c
}

func (r redisBroker) Produce(ctx context.Context, value []byte) error {
	return r.client.Publish(ctx, r.channel, value).Err()
}

func (r redisBroker) Consume(ctx context.Context, handler func(value []byte)) error {
	sub := r.client.Subscribe(ctx, r.channel)
	defer sub.Close()

	ch := sub.Channel()
	for msg := range ch {
		handler([]byte(msg.Payload))
	}

	return nil
}