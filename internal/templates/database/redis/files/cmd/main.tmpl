package main

import (
	"fmt"
	"log"

	"{{.Name}}/configs"
	"{{.Name}}/internal/adapters/repositories/redis"
	"{{.Name}}/internal/core/ports"
	"{{.Name}}/internal/core/services"
)

func init() {
	configs.LoadEnv()
}

func insert(us ports.UserServiceInterface, value string) {
	lastInsertID, err := us.Create(value)
	if err != nil {
		log.Fatal(err)
	}
	fmt.Println("last inserted ID:", lastInsertID)
}

func fetch(us ports.UserServiceInterface, id string) {
	user, err := us.Show(id)
	if err != nil {
		log.Fatal(err)
	}

	json, err := user.ToJson()
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println(json)
}

func update(us ports.UserServiceInterface, id string, newName string) {
	rowsAffected, err := us.Update(id, newName)
	if err != nil {
		log.Fatal(err)
	}
	fmt.Println("rows effected:", rowsAffected)
}

func delete(us ports.UserServiceInterface, id string) {
	rowsAffected, err := us.Delete(id)
	if err != nil {
		log.Fatal(err)
	}
	fmt.Println("rows effected:", rowsAffected)
}

func fetchAll(us ports.UserServiceInterface) {
	users, err := us.Index()
	if err != nil {
		log.Fatal(err)
	}

	for _, user := range users {
		json, err := user.ToJson()
		if err != nil {
			log.Fatal(err)
		}
		fmt.Println(json)
	}
}

func main() {
	db := redis.New()
	us := services.NewUserService(db)

	// Step 1) Uncomment the following line to add new values to the DB
	// insert(us, "John Doe")

	// Step 2) Uncomment the following line to fetch by ID
	// fetch(us, "<record_id>")

	// Step 3) Uncomment the following line to update
	// update(us, "<record_id>", "Jane Doe")

	// Step 4) Uncomment the following line to delete
	// delete(us, "<record_id>")

	fetchAll(us)
}
