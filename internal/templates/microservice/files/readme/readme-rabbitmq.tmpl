## RabbitMQ Guide

Since this project incorporates RabbitMQ as a Pub/Sub service, you must adhere to the following instructions before running the app.  
A `docker-compose.yml` file is included in this project which will be used for creating a RabbitMQ container. Some commands are also added to the `Makefile` file for running a container (The following guide is applicable if GNU/Make tool is installed on your machine).

### Run A RabbitMQ Container

First, make sure Docker is up and running on your machine. Then in the root path of the project run the following command:

```text
$ make rabbitmq-up
```

In order to stop the container, you can run the following command:

```text
$ make rabbitmq-down
```

### RabbitMQ Web Interface

RabbitMQ comes with a web-based management tool that is accessible at `http://localhost:15672` for management tasks such as publishing new messages or consuming published messages. You can use `guest` as both username and password in the login form.

## Publish A New Message

By running the following command in the terminal, open the RabbitMQ CLI:

```text
$ docker-compose exec rabbitmq /bin/bash
```

Then you need to make sure RabbitMQ management plugin is enabled. You can enable it by running:

```text
rabbitmq-plugins enable rabbitmq_management
```

The `main` function is the entry point of our app:

```go
func main() {
	broker := rabbitmq.New("testing")
	service := services.NewBrokerService(broker)
	service.Produce(domain.Message{Data: "Hello World"})

	// service.Consume()
}
```

As shown above, we have used the name `testing` for our queue which we will be use it later. The responsibility of the `service.Produce` is to publish a new message of type `domain.Message` to RabbitMQ; so by running the `make run` command inside the project folder, a new message will be published to the RabbitMQ queue.  
In the RabbitMQ CLI, subscribe to a queue using the `get` command. For example, if you want to subscribe to a queue named `testing`, you need to run the following command:

```text
rabbitmqadmin get queue=testing
+-------------+----------+---------------+---------------------------+---------------+------------------+-------------+
| routing_key | exchange | message_count |          payload          | payload_bytes | payload_encoding | redelivered |
+-------------+----------+---------------+---------------------------+---------------+------------------+-------------+
| testing     |          | 1             | {"data":"Hello World"} | 25            | string           | False       |
+-------------+----------+---------------+---------------------------+---------------+------------------+-------------+
```

The problem with the RabbitMQ CLI though is that it does not show all the new messages; it just shows the number of messages in the queue. So to get the new messages, we have to use the web interface at `http://localhost:15672/#/queues` then from the table of queues, click on `testing`.

## Subscribe to A Queue

As shown above, the `service.Consume()` line is commented out; in order to turn our app into a subscriber, we need to change the `main` function as follows:

```go
func main() {
	broker := rabbitmq.New("testing")
	service := services.NewBrokerService(broker)
	// service.Produce(domain.Message{Data: "Hello World #1"})

	service.Consume()
}
```

Now we need to run the `make run` command inside the project folder; this time around the app does no exit because it needs to wait for incoming messages.  
As the next step, we need to go to the RabbitMQ CLI and run the following command:

```text
rabbitmqadmin publish routing_key=testing payload="Hello World"
```

By referring to the terminal window that the app is running in, we will see:

```text
$ make run
Hello World
```

## How to Create Publisher And Subscriber Apps?

As another approach, instead of using the RabbitMQ CLI in order to subscribe to a queue or publish messages in a queue, we can create two stand-alone apps and use them as a publisher and subscriber respectively. To start, let's create a RabbitMQ microservice called `publisher` using the following command:

```text
$ gopamin new -n publisher -t microservice -p rabbitmq
```

Then create the second one named `subscriber` as follows:

```text
$ gopamin new -n subscriber -t microservice -p rabbitmq
```

We do not need to change the `publisher` app at all; the `subscriber` though needs to get modified as follows:

```go
func main() {
	broker := rabbitmq.New("testing")
	service := services.NewBrokerService(broker)
	service.Consume()
}
```

As the final step, we need to open up two different terminal windows and cd into those projects then run the `make run` command for the `subscriber` and `publisher` respectively; inside the terminal window having to do with the `subscriber` app you will see:

```text
$ make run
{"data":"Hello World"}
```