package databases

import (
	"database/sql"
	"fmt"
	"log"
	"os"

	_ "github.com/go-sql-driver/mysql"
)

const tableName = "users"

type MySQL interface {
	InsertRow(name string) (int64, error)
	UpdateRow(id int, newName string) (int64, error)
	DeleteRow(id int) (int64, error)
	FetchRows() ([]User, error)
	FetchRow(id int) (User, error)
}

type User struct {
	Id   int    `json:"id"`
	Name string `json:"name"`
}

type connection struct {
	db *sql.DB
}

func New() MySQL {
	databaseName := os.Getenv("DB_DATABASE")
	databasePassword := os.Getenv("DB_PASSWORD")
	databaseUsername := os.Getenv("DB_USERNAME")
	databasePort := os.Getenv("DB_PORT")
	databaseHost := os.Getenv("DB_HOST")

	db, err := sql.Open("mysql", fmt.Sprintf("%s:%s@tcp(%s:%s)/%s", databaseUsername, databasePassword, databaseHost, databasePort, databaseName))
	if err != nil {
		log.Fatal(err)
	}
	db.SetConnMaxLifetime(0)
	db.SetMaxIdleConns(50)
	db.SetMaxOpenConns(50)

	s := &connection{db: db}

	query := fmt.Sprintf("CREATE TABLE IF NOT EXISTS %s (id INT AUTO_INCREMENT PRIMARY KEY, name VARCHAR(50))", tableName)
	_, err = db.Exec(query)
	if err != nil {
		log.Fatalf(fmt.Sprintf("error creating table: %v", err))
	}

	return s
}

func (s *connection) InsertRow(name string) (int64, error) {
	query := fmt.Sprintf("INSERT INTO %s (name) VALUES (?)", tableName)
	result, err := s.db.Exec(query, name)
	if err != nil {
		return 0, err
	}
	lastInsertID, _ := result.LastInsertId()

	return lastInsertID, nil
}

func (s *connection) FetchRow(id int) (User, error) {
	var user User
	query := fmt.Sprintf("SELECT * FROM %s WHERE id = ?", tableName)
	row := s.db.QueryRow(query, id)

	if err := row.Scan(&user.Id, &user.Name); err != nil {
		if err == sql.ErrNoRows {
			return User{}, fmt.Errorf("user not found with ID %d", id)
		} else {
			return User{}, fmt.Errorf("error fetching data: %v", err)
		}
	}

	return user, nil
}

func (s *connection) UpdateRow(id int, newName string) (int64, error) {
	query := fmt.Sprintf("UPDATE %s SET name = ? WHERE id = ?", tableName)
	result, err := s.db.Exec(query, newName, id)
	if err != nil {
		return 0, err
	}
	rowsAffected, _ := result.RowsAffected()

	return rowsAffected, nil

}

func (s *connection) DeleteRow(id int) (int64, error) {
	query := fmt.Sprintf("DELETE FROM %s WHERE id = ?", tableName)
	result, err := s.db.Exec(query, id)
	if err != nil {
		return 0, err
	}
	rowsAffected, _ := result.RowsAffected()

	return rowsAffected, nil
}

func (s *connection) FetchRows() ([]User, error) {
	var users []User
	query := fmt.Sprintf("SELECT * FROM %s", tableName)
	rows, err := s.db.Query(query)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	for rows.Next() {
		var user User
		if err := rows.Scan(&user.Id, &user.Name); err != nil {
			return nil, err
		}
		users = append(users, user)
	}

	return users, nil
}