package databases

import (
	"database/sql"
	"fmt"
	"log"
	"os"

	_ "github.com/go-sql-driver/mysql"
)

const tableName = "users"

type Database interface {
	CreateTable() error
	Insert(name string) (int64, error)
	Update(id int, newName string) (int64, error)
	Delete(id int) (int64, error)
	Fetch(id int) (User, error)
	FetchAll() ([]User, error)
}

type User struct {
	Id   int    `json:"id"`
	Name string `json:"name"`
}

type connection struct {
	db *sql.DB
}

func New() Database {
	databaseName := os.Getenv("DB_DATABASE")
	databasePassword := os.Getenv("DB_PASSWORD")
	databaseUsername := os.Getenv("DB_USERNAME")
	databasePort := os.Getenv("DB_PORT")
	databaseHost := os.Getenv("DB_HOST")

	db, err := sql.Open(
		"mysql",
		fmt.Sprintf(
			"%s:%s@tcp(%s:%s)/%s?timeout=10s",
			databaseUsername,
			databasePassword,
			databaseHost,
			databasePort,
			databaseName,
		),
	)
	if err != nil {
		log.Fatal(err)
	}
	db.SetConnMaxLifetime(0)
	db.SetMaxIdleConns(50)
	db.SetMaxOpenConns(50)

	c := &connection{db: db}

	return c
}

func (c *connection) CreateTable() error {
	_, err := c.db.Exec(
		fmt.Sprintf(
			"CREATE TABLE IF NOT EXISTS %s (id INT AUTO_INCREMENT PRIMARY KEY, name VARCHAR(50))",
			tableName,
		),
	)
	if err != nil {
		return err
	}

	return nil
}

func (c *connection) Insert(name string) (int64, error) {
	result, err := c.db.Exec(
		fmt.Sprintf(
			"INSERT INTO %s (name) VALUES (?)",
			tableName,
		),
		name,
	)
	if err != nil {
		return 0, err
	}

	lastInsertID, _ := result.LastInsertId()

	return lastInsertID, nil
}

func (c *connection) Update(id int, newName string) (int64, error) {
	result, err := c.db.Exec(
		fmt.Sprintf(
			"UPDATE %s SET name = ? WHERE id = ?",
			tableName,
		),
		newName,
		id,
	)
	if err != nil {
		return 0, err
	}

	rowsAffected, _ := result.RowsAffected()

	return rowsAffected, nil
}

func (c *connection) Delete(id int) (int64, error) {
	result, err := c.db.Exec(
		fmt.Sprintf(
			"DELETE FROM %s WHERE id = ?",
			tableName,
		),
		id,
	)
	if err != nil {
		return 0, err
	}
	
	rowsAffected, _ := result.RowsAffected()

	return rowsAffected, nil
}

func (c *connection) Fetch(id int) (User, error) {
	var user User
	row := c.db.QueryRow(
		fmt.Sprintf(
			"SELECT * FROM %s WHERE id = ?",
			tableName,
		),
		id,
	)

	if err := row.Scan(&user.Id, &user.Name); err != nil {
		if err == sql.ErrNoRows {
			return User{}, fmt.Errorf("user not found with ID %d", id)
		} else {
			return User{}, fmt.Errorf("error fetching data: %v", err)
		}
	}

	return user, nil
}

func (c *connection) FetchAll() ([]User, error) {
	var users []User
	rows, err := c.db.Query(
		fmt.Sprintf(
			"SELECT * FROM %s",
			tableName,
		),
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	for rows.Next() {
		var user User
		if err := rows.Scan(&user.Id, &user.Name); err != nil {
			return nil, err
		}
		users = append(users, user)
	}

	return users, nil
}