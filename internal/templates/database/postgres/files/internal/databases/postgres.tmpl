package databases

import (
	"context"
	"fmt"
	"log"
	"os"
	"strconv"

	"github.com/jackc/pgx/v5"
)

const tableName = "users"

type Database interface {
	CreateTable() error
	Insert(name string) (int, error)
	Update(id int, newName string) (int64, error)
	Delete(id int) (int64, error)
	Fetch(id int) (User, error)
	FetchAll() ([]User, error)
}

type User struct {
	Id   int    `json:"id"`
	Name string `json:"name"`
}

type connection struct {
	db *pgx.Conn
}

func New() Database {
	databaseName := os.Getenv("DB_DATABASE")
	databasePassword := os.Getenv("DB_PASSWORD")
	databaseUsername := os.Getenv("DB_USERNAME")
	databaseHost := os.Getenv("DB_HOST")
	databasePort, err := strconv.Atoi(os.Getenv("DB_PORT"))
	if err != nil {
		log.Fatal("Error converting DB_PORT to integer:", err)
	}

	db, err := pgx.Connect(
		context.Background(),
		fmt.Sprintf(
			"postgres://%v:%v@%v:%d/%v",
			databaseUsername,
			databasePassword,
			databaseHost,
			databasePort,
			databaseName,
		),
	)
	if err != nil {
		fmt.Fprintf(os.Stderr, "Unable to connect to database: %v\n", err)
		os.Exit(1)
	}

	c := &connection{db: db}

	return c
}

func (c *connection) CreateTable() error {
	_, err := c.db.Exec(
		context.Background(),
		fmt.Sprintf(
			"CREATE TABLE IF NOT EXISTS %v (id SERIAL PRIMARY KEY, name VARCHAR(100))",
			tableName,
		),
	)
	if err != nil {
		return err
	}

	return nil
}

func (c *connection) Insert(name string) (int, error) {
	var insertedId int
	err := c.db.QueryRow(
		context.Background(),
		fmt.Sprintf(
			"INSERT INTO %v (name) VALUES ($1) RETURNING id",
			tableName,
		),
		name,
	).Scan(&insertedId)
	if err != nil {
		return 0, err
	}

	return insertedId, nil
}

func (c *connection) Update(id int, newName string) (int64, error) {
	commandTag, err := c.db.Exec(
		context.Background(),
		fmt.Sprintf(
			"UPDATE %v SET name = $1 WHERE id = $2",
			tableName,
		),
		newName,
		id,
	)
	if err != nil {
		return 0, err
	}

	return commandTag.RowsAffected(), err
}

func (c *connection) Delete(id int) (int64, error) {
	commandTag, err := c.db.Exec(
		context.Background(),
		fmt.Sprintf(
			"DELETE FROM %v WHERE id = $1",
			tableName,
		),
		id,
	)
	if err != nil {
		return 0, err
	}

	return commandTag.RowsAffected(), nil
}

func (c *connection) Fetch(id int) (User, error) {
	var user User

	err := c.db.QueryRow(
		context.Background(),
		fmt.Sprintf(
			"SELECT id, name FROM %v WHERE id = $1",
			tableName,
		),
		id,
	).Scan(&user.Id, &user.Name)

	if err != nil {
		return User{}, err
	}

	return user, nil
}

func (c *connection) FetchAll() ([]User, error) {
	var users []User
	rows, err := c.db.Query(
		context.Background(),
		fmt.Sprintf(
			"SELECT id, name FROM %v",
			tableName,
		),
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	for rows.Next() {
		var user User
		if err := rows.Scan(&user.Id, &user.Name); err != nil {
			return nil, err
		}
		users = append(users, user)
	}

	return users, nil
}