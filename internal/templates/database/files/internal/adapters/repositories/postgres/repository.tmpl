package postgres

import (
	"context"
	"fmt"
	"log"
	"{{.Name}}/internal/core/domain"
	"{{.Name}}/internal/core/ports"
	"os"
	"strconv"

	"github.com/jackc/pgx/v5"
)

const tableName = "users"

type connection struct {
	db *pgx.Conn
}

func New() ports.UserRepositoryInterface {
	databaseName := os.Getenv("POSTGRES_DATABASE")
	databasePassword := os.Getenv("POSTGRES_PASSWORD")
	databaseUsername := os.Getenv("POSTGRES_USERNAME")
	databaseHost := os.Getenv("POSTGRES_HOST")
	databasePort, err := strconv.Atoi(os.Getenv("POSTGRES_PORT"))
	if err != nil {
		log.Fatal("Error converting DB_PORT to integer:", err)
	}

	db, err := pgx.Connect(
		context.Background(),
		fmt.Sprintf(
			"postgres://%v:%v@%v:%d/%v",
			databaseUsername,
			databasePassword,
			databaseHost,
			databasePort,
			databaseName,
		),
	)
	if err != nil {
		fmt.Fprintf(os.Stderr, "Unable to connect to database: %v\n", err)
		os.Exit(1)
	}

	c := &connection{db: db}
	c.CreateTable()

	return c
}

func (c *connection) CreateTable() error {
	_, err := c.db.Exec(
		context.Background(),
		fmt.Sprintf(
			"CREATE TABLE IF NOT EXISTS %v (id SERIAL PRIMARY KEY, name VARCHAR(100))",
			tableName,
		),
	)
	if err != nil {
		return err
	}

	return nil
}

func (c *connection) Insert(name string) (string, error) {
	var insertedId int64
	err := c.db.QueryRow(
		context.Background(),
		fmt.Sprintf(
			"INSERT INTO %v (name) VALUES ($1) RETURNING id",
			tableName,
		),
		name,
	).Scan(&insertedId)
	if err != nil {
		return "", err
	}

	return strconv.FormatInt(insertedId, 10), nil
}

func (c *connection) Update(id string, newName string) (string, error) {
	commandTag, err := c.db.Exec(
		context.Background(),
		fmt.Sprintf(
			"UPDATE %v SET name = $1 WHERE id = $2",
			tableName,
		),
		newName,
		id,
	)
	if err != nil {
		return "", err
	}

	return strconv.FormatInt(commandTag.RowsAffected(), 10), nil
}

func (c *connection) Delete(id string) (string, error) {
	commandTag, err := c.db.Exec(
		context.Background(),
		fmt.Sprintf(
			"DELETE FROM %v WHERE id = $1",
			tableName,
		),
		id,
	)
	if err != nil {
		return "", err
	}

	return strconv.FormatInt(commandTag.RowsAffected(), 10), nil
}

func (c *connection) Fetch(id string) (domain.User, error) {
	var user domain.User

	err := c.db.QueryRow(
		context.Background(),
		fmt.Sprintf(
			"SELECT id, name FROM %v WHERE id = $1",
			tableName,
		),
		id,
	).Scan(&user.Id, &user.Name)

	if err != nil {
		return domain.User{}, err
	}

	return user, nil
}

func (c *connection) FetchAll() ([]domain.User, error) {
	var users []domain.User
	rows, err := c.db.Query(
		context.Background(),
		fmt.Sprintf(
			"SELECT id, name FROM %v",
			tableName,
		),
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	for rows.Next() {
		var user domain.User
		if err := rows.Scan(&user.Id, &user.Name); err != nil {
			return nil, err
		}
		users = append(users, user)
	}

	return users, nil
}
